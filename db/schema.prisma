// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("HEROKU_POSTGRESQL_COPPER_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           Role     @default(CLIENT)

  specialities      String[]
  diseases          String[]
  medicines         String[]
  emergencyContacts String[]

  scheduleIds Int[]

  hiredAt  DateTime?
  finishAt DateTime?

  tokens             Token[]
  sessions           RoomSession[]
  rooms              Room[]
  sessionReservation RoomSessionReservation[]
  Session            Session[]
}

enum Role {
  ADMIN
  CLIENT
  INSTRUCTOR
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

model Room {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String
  maxCapacity        Int
  maxCapacityAllowed Float
  photo              String
  specialities       String[]

  adminId    Int
  scheduleId Int

  admin       User          @relation(fields: [adminId], references: [id])
  schedule    Schedule      @relation(fields: [scheduleId], references: [id])
  RoomSession RoomSession[]
}

model Schedule {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  opens    DateTime
  closes   DateTime
  weekDays String[]

  rooms       Room[]
  RoomSession RoomSession[]
}

model RoomSession {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  specialities    String[]
  maxParticipants Int
  price           Float

  roomId       Int
  instructorId Int
  scheduleId   Int

  room                   Room                     @relation(fields: [roomId], references: [id])
  instructor             User                     @relation(fields: [instructorId], references: [id])
  schedule               Schedule                 @relation(fields: [scheduleId], references: [id])
  RoomSessionReservation RoomSessionReservation[]
}

model RoomSessionReservation {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      Int
  sessionId   Int
  paid        Boolean            @default(false)
  paymentType SessionPaymentType
  totalHours  Float

  user    User        @relation(fields: [userId], references: [id])
  session RoomSession @relation(fields: [sessionId], references: [id])
}

enum SessionPaymentType {
  BEFORE_HAND
  IN_TIME
}
